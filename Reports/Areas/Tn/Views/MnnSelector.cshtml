@{
    String srcList = (String)ViewData["SrcList"];
    String[] srcs = ((String.IsNullOrWhiteSpace(srcList)) ? null : srcList.Split(','));

    System.Data.DataTable dt = FarmSib.Base.Data.HomeData.Home.GetMnnItems(srcs);
}
<div id="p_mnn_selector">
    <select style="display: none;">
        @if ((dt != null) && (dt.Rows.Count > 0))
        {
            foreach (System.Data.DataRow dr in dt.Rows)
            {
                Object value = dr["мнн"];
                <option>@((value == DBNull.Value) ? "" : (String)value)</option>
            }
        }
    </select>
    <table>
        <tr>
            <td style="font-weight: bold;">МНН или АТХ:&nbsp;</td>
            <td>
                <input type="text"
                       style="width: 640px;" autocomplete="off" />
                <!-- ddDiv - содержит заголовок для закрытия и список -->
                <div style="width: 640px; height: 400px;
                        background-color:#eef;
                        padding: 2px;
                        display: none;
                        overflow:auto;
                        position: absolute;">
                    <!-- заголовок для закрытия -->
                    <div style="width: 100%; text-align: right;" onclick="$(this.parentNode).hide();">X</div>
                    <!-- ddlDiv - список -->
                    <div></div>
                </div>
            </td>
            <td>&nbsp;точно&nbsp;<input type="checkbox" /></td>
        </tr>
    </table>
</div>
<script type="text/javascript">
    var MnnSelector = (function () {
        var mainDiv = $('#p_mnn_selector');
        var fullList = mainDiv.find('> select:eq(0)'); // скрытый полный список
        var fullListRows = fullList.find('option'); // строки полного списка
        var selector = mainDiv.find('> table:eq(0)'); // блок для выбора
        var input = selector.find('input[type="text"]:eq(0)'); // поле для ввода искомого значения
        var exactly = selector.find('input[type="checkbox"]:eq(0)'); // признак точного соответствия при поиске
        var ddDiv = selector.find('div:eq(0)'); // выпадающее окно
        var ddlDiv = ddDiv.find('div:eq(1)'); // отфильтрованный список
        var mnnSelectHandlers = [];

        input.keydown(function (e) {
            if (e.which == 13) {
                e.preventDefault();
                ddDiv.hide();
                ddlDiv.empty();
                onMnnSelect(this.value, exactly[0].checked);
            }
        });

        var testAndDo = (function () {
            var timerId;
            var lastValue = input.val();
            return {
                start: function () {
                    var newValue = input.val().trim();
                    if (newValue != lastValue) {
                        lastValue = newValue;
                        ddlDiv.empty();
                        if (newValue.length == 0) {
                            ddDiv.hide();
                            onMnnSelect('', exactly[0].checked);
                        } else {
                            loadResult(newValue);
                            ddDiv.show();
                        }
                    }
                    timerId = setTimeout(testAndDo.start, 500);
                },
                stop: function () {
                    clearInterval(timerId);
                }
            }
        })();

        input.focusin(testAndDo.start).focusout(testAndDo.stop);

        // таблица из строчек прошедших фильтр
        // источник данных - fullListRows, фильтр - searchTerm
        function createTable(searchTerm) {
            var table = $('<table>');
            var tbody = $('<tbody>').appendTo(table);
            var j = 0;
            for (var i = 0; i < fullListRows.length; i++) {
                var text = $(fullListRows[i]).text();
                if (isSrch(text, searchTerm)) {
                    var row = $('<tr>').appendTo(tbody);
                    var cell = $('<td>').appendTo(row)
                        .mouseover(function () { $(this).css('background-color', '#fee'); })
                        .mouseout(function () { $(this).css('background-color', '#eef'); })
                        .click(function () { replaceInput(this) })
                        .css('padding', '2px')
                        .text(text);
                    if (j++ > 50) { break; }
                }
            }
            return table;
        }
        // проверяет наличие в text ключевых слов разделённых пробелом, без учета их порядка.
        function isSrch(text, searchTerm) {
            var ok = true;
            text = text.toUpperCase();
            searchTerm = searchTerm.toUpperCase()
            searchTerm = searchTerm.replace(/[^А-Я]/g, ' ');
            var sts = searchTerm.split(' ');
            if ((sts == null) || (sts.length == 0)) {
                if (text.indexOf(searchTerm) < 0) { ok = false; }
            } else {
                for (var i = 0; i < sts.length; i++) {
                    if (sts[i].length > 0) {
                        if (text.indexOf(sts[i]) < 0) { ok = false; break; }
                    }
                }
            }
            return ok;
        }
        function loadResult(searchTerm) {
            createTable(searchTerm).appendTo(ddlDiv);
            var iPos = input.position();
            ddDiv.position({ top: (iPos.top + input.outerHeight() + 2), left: iPos.left });
            if ((typeof PageZIndex) === "number") { ddDiv.zIndex(++PageZIndex); }
        }
        function replaceInput(cell) {
            ddDiv.hide();
            ddlDiv.empty();
            var text = $(cell).text();
            input.val(text);
            onMnnSelect(text, exactly[0].checked);
        }
        function onMnnSelect(text, exactlyValue) {
            for (var hi = 0; hi < mnnSelectHandlers.length; hi++) {
                mnnSelectHandlers[hi](text, exactlyValue);
            }
        }
        return {
            setMnn: function (mnn) {
                input.val(mnn);
            },
            addMnnSelectHandler: function (handler) {
                if (typeof handler === 'function') {
                    mnnSelectHandlers.push(handler);
                }
            }
        };
    })();
</script>
